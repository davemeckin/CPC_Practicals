{"version":3,"sources":["webpack:///./node_modules/refractor/lang/cpp.js"],"names":["refractorC","cpp","Prism","register","languages","extend","pattern","lookbehind","keyword","number","greedy","operator","boolean","insertBefore","alias","module","exports","displayName","aliases"],"mappings":"4FAEA,IAAIA,EAAa,EAAQ,QAMzB,SAASC,EAAIC,GACXA,EAAMC,SAASH,GACfE,EAAME,UAAUH,IAAMC,EAAME,UAAUC,OAAO,IAAK,CAChD,aAAc,CACZC,QAAS,kCACTC,YAAY,GAEdC,QAAS,8lBACTC,OAAQ,CACNH,QAAS,qIACTI,QAAQ,GAEVC,SAAU,iHACVC,QAAS,uBAEXV,EAAME,UAAUS,aAAa,MAAO,SAAU,CAC5C,aAAc,CACZP,QAAS,oCACTQ,MAAO,SACPJ,QAAQ,KAvBdK,EAAOC,QAAUf,EACjBA,EAAIgB,YAAc,MAClBhB,EAAIiB,QAAU","file":"react-syntax-highlighter_languages_refractor_cpp-2a80101e60562636a693.js","sourcesContent":["'use strict';\n\nvar refractorC = require('./c.js');\n\nmodule.exports = cpp;\ncpp.displayName = 'cpp';\ncpp.aliases = [];\n\nfunction cpp(Prism) {\n  Prism.register(refractorC);\n  Prism.languages.cpp = Prism.languages.extend('c', {\n    'class-name': {\n      pattern: /(\\b(?:class|enum|struct)\\s+)\\w+/,\n      lookbehind: true\n    },\n    keyword: /\\b(?:alignas|alignof|asm|auto|bool|break|case|catch|char|char16_t|char32_t|class|compl|const|constexpr|const_cast|continue|decltype|default|delete|do|double|dynamic_cast|else|enum|explicit|export|extern|float|for|friend|goto|if|inline|int|int8_t|int16_t|int32_t|int64_t|uint8_t|uint16_t|uint32_t|uint64_t|long|mutable|namespace|new|noexcept|nullptr|operator|private|protected|public|register|reinterpret_cast|return|short|signed|sizeof|static|static_assert|static_cast|struct|switch|template|this|thread_local|throw|try|typedef|typeid|typename|union|unsigned|using|virtual|void|volatile|wchar_t|while)\\b/,\n    number: {\n      pattern: /(?:\\b0b[01']+|\\b0x(?:[\\da-f']+\\.?[\\da-f']*|\\.[\\da-f']+)(?:p[+-]?[\\d']+)?|(?:\\b[\\d']+\\.?[\\d']*|\\B\\.[\\d']+)(?:e[+-]?[\\d']+)?)[ful]*/i,\n      greedy: true\n    },\n    operator: />>=?|<<=?|->|([-+&|:])\\1|[?:~]|[-+*/%&|^!=<>]=?|\\b(?:and|and_eq|bitand|bitor|not|not_eq|or|or_eq|xor|xor_eq)\\b/,\n    boolean: /\\b(?:true|false)\\b/\n  });\n  Prism.languages.insertBefore('cpp', 'string', {\n    'raw-string': {\n      pattern: /R\"([^()\\\\ ]{0,16})\\([\\s\\S]*?\\)\\1\"/,\n      alias: 'string',\n      greedy: true\n    }\n  });\n}"],"sourceRoot":""}