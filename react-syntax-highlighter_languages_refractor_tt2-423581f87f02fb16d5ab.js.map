{"version":3,"sources":["webpack:///./node_modules/refractor/lang/tt2.js"],"names":["refractorMarkupTemplating","tt2","Prism","register","languages","extend","comment","keyword","punctuation","insertBefore","operator","variable","pattern","delimiter","alias","greedy","inside","string","hooks","add","env","buildPlaceholders","tokenizePlaceholders","module","exports","displayName","aliases"],"mappings":"6FAEA,IAAIA,EAA4B,EAAQ,QAMxC,SAASC,EAAIC,GACXA,EAAMC,SAASH,GAEf,SAAWE,GACTA,EAAME,UAAUH,IAAMC,EAAME,UAAUC,OAAO,QAAS,CACpDC,QAAS,sBACTC,QAAS,0NACTC,YAAa,eAEfN,EAAME,UAAUK,aAAa,MAAO,SAAU,CAC5CC,SAAU,iDACVC,SAAU,CACRC,QAAS,+CAGbV,EAAME,UAAUK,aAAa,MAAO,UAAW,CAC7CI,UAAW,CACTD,QAAS,sBACTE,MAAO,iBAGXZ,EAAME,UAAUK,aAAa,MAAO,SAAU,CAC5C,uBAAwB,CACtBG,QAAS,gCACTG,QAAQ,EACRD,MAAO,UAET,uBAAwB,CACtBF,QAAS,gCACTG,QAAQ,EACRD,MAAO,SACPE,OAAQ,CACNL,SAAU,CACRC,QAAS,wDAMVV,EAAME,UAAUH,IAAIgB,OAC3Bf,EAAMgB,MAAMC,IAAI,mBAAmB,SAAUC,GAE3ClB,EAAME,UAAU,qBAAqBiB,kBAAkBD,EAAK,MAD3C,sBAGnBlB,EAAMgB,MAAMC,IAAI,kBAAkB,SAAUC,GAC1ClB,EAAME,UAAU,qBAAqBkB,qBAAqBF,EAAK,UA1CnE,CA4CGlB,GAnDLqB,EAAOC,QAAUvB,EACjBA,EAAIwB,YAAc,MAClBxB,EAAIyB,QAAU","file":"react-syntax-highlighter_languages_refractor_tt2-423581f87f02fb16d5ab.js","sourcesContent":["'use strict';\n\nvar refractorMarkupTemplating = require('./markup-templating.js');\n\nmodule.exports = tt2;\ntt2.displayName = 'tt2';\ntt2.aliases = [];\n\nfunction tt2(Prism) {\n  Prism.register(refractorMarkupTemplating);\n\n  (function (Prism) {\n    Prism.languages.tt2 = Prism.languages.extend('clike', {\n      comment: /#.*|\\[%#[\\s\\S]*?%\\]/,\n      keyword: /\\b(?:BLOCK|CALL|CASE|CATCH|CLEAR|DEBUG|DEFAULT|ELSE|ELSIF|END|FILTER|FINAL|FOREACH|GET|IF|IN|INCLUDE|INSERT|LAST|MACRO|META|NEXT|PERL|PROCESS|RAWPERL|RETURN|SET|STOP|TAGS|THROW|TRY|SWITCH|UNLESS|USE|WHILE|WRAPPER)\\b/,\n      punctuation: /[[\\]{},()]/\n    });\n    Prism.languages.insertBefore('tt2', 'number', {\n      operator: /=[>=]?|!=?|<=?|>=?|&&|\\|\\|?|\\b(?:and|or|not)\\b/,\n      variable: {\n        pattern: /[a-z]\\w*(?:\\s*\\.\\s*(?:\\d+|\\$?[a-z]\\w*))*/i\n      }\n    });\n    Prism.languages.insertBefore('tt2', 'keyword', {\n      delimiter: {\n        pattern: /^(?:\\[%|%%)-?|-?%]$/,\n        alias: 'punctuation'\n      }\n    });\n    Prism.languages.insertBefore('tt2', 'string', {\n      'single-quoted-string': {\n        pattern: /'[^\\\\']*(?:\\\\[\\s\\S][^\\\\']*)*'/,\n        greedy: true,\n        alias: 'string'\n      },\n      'double-quoted-string': {\n        pattern: /\"[^\\\\\"]*(?:\\\\[\\s\\S][^\\\\\"]*)*\"/,\n        greedy: true,\n        alias: 'string',\n        inside: {\n          variable: {\n            pattern: /\\$(?:[a-z]\\w*(?:\\.(?:\\d+|\\$?[a-z]\\w*))*)/i\n          }\n        }\n      }\n    }); // The different types of TT2 strings \"replace\" the C-like standard string\n\n    delete Prism.languages.tt2.string;\n    Prism.hooks.add('before-tokenize', function (env) {\n      var tt2Pattern = /\\[%[\\s\\S]+?%\\]/g;\n      Prism.languages['markup-templating'].buildPlaceholders(env, 'tt2', tt2Pattern);\n    });\n    Prism.hooks.add('after-tokenize', function (env) {\n      Prism.languages['markup-templating'].tokenizePlaceholders(env, 'tt2');\n    });\n  })(Prism);\n}"],"sourceRoot":""}