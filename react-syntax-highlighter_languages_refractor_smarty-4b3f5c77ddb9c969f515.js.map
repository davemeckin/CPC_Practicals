{"version":3,"sources":["webpack:///./node_modules/refractor/lang/smarty.js"],"names":["refractorMarkupTemplating","smarty","Prism","register","languages","comment","delimiter","pattern","alias","string","number","variable","lookbehind","function","inside","operator","punctuation","keyword","hooks","add","env","smartyLitteralMode","buildPlaceholders","match","tokenizePlaceholders","module","exports","displayName","aliases"],"mappings":"6FAEA,IAAIA,EAA4B,EAAQ,QAMxC,SAASC,EAAOC,GACdA,EAAMC,SAASH,GAOf,SAAWE,GACTA,EAAME,UAAUH,OAAS,CACvBI,QAAS,mBACTC,UAAW,CACTC,QAAS,WACTC,MAAO,eAETC,OAAQ,mCACRC,OAAQ,2DACRC,SAAU,CAAC,cAAe,cAAe,CACvCJ,QAAS,mBACTK,YAAY,GACX,CACDL,QAAS,sBACTK,YAAY,IAEdC,SAAU,CAAC,CACTN,QAAS,qBACTK,YAAY,GACX,gBAAiB,mBACpB,YAAa,CAEXL,QAAS,2BACTO,OAAQ,CACNH,SAAU,CACRJ,QAAS,kBACTK,YAAY,GAEdG,SAAU,MAGdC,YAAa,CAAC,mBACdD,SAAU,CAAC,mCAAoC,iDAAkD,kDACjGE,QAAS,oCAGXf,EAAMgB,MAAMC,IAAI,mBAAmB,SAAUC,GAC3C,IAGIC,GAAqB,EACzBnB,EAAME,UAAU,qBAAqBkB,kBAAkBF,EAAK,SAJxC,kCAIiE,SAAUG,GAM7F,MARsB,eAIlBA,IACFF,GAAqB,IAGlBA,IATmB,cAUlBE,IACFF,GAAqB,IAGhB,SAObnB,EAAMgB,MAAMC,IAAI,kBAAkB,SAAUC,GAC1ClB,EAAME,UAAU,qBAAqBoB,qBAAqBJ,EAAK,aA5DnE,CA8DGlB,GA1ELuB,EAAOC,QAAUzB,EACjBA,EAAO0B,YAAc,SACrB1B,EAAO2B,QAAU","file":"react-syntax-highlighter_languages_refractor_smarty-4b3f5c77ddb9c969f515.js","sourcesContent":["'use strict';\n\nvar refractorMarkupTemplating = require('./markup-templating.js');\n\nmodule.exports = smarty;\nsmarty.displayName = 'smarty';\nsmarty.aliases = [];\n\nfunction smarty(Prism) {\n  Prism.register(refractorMarkupTemplating)\n  /* TODO\n  Add support for variables inside double quoted strings\n  Add support for {php}\n  */\n  ;\n\n  (function (Prism) {\n    Prism.languages.smarty = {\n      comment: /\\{\\*[\\s\\S]*?\\*\\}/,\n      delimiter: {\n        pattern: /^\\{|\\}$/i,\n        alias: 'punctuation'\n      },\n      string: /([\"'])(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/,\n      number: /\\b0x[\\dA-Fa-f]+|(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:[Ee][-+]?\\d+)?/,\n      variable: [/\\$(?!\\d)\\w+/, /#(?!\\d)\\w+#/, {\n        pattern: /(\\.|->)(?!\\d)\\w+/,\n        lookbehind: true\n      }, {\n        pattern: /(\\[)(?!\\d)\\w+(?=\\])/,\n        lookbehind: true\n      }],\n      function: [{\n        pattern: /(\\|\\s*)@?(?!\\d)\\w+/,\n        lookbehind: true\n      }, /^\\/?(?!\\d)\\w+/, /(?!\\d)\\w+(?=\\()/],\n      'attr-name': {\n        // Value is made optional because it may have already been tokenized\n        pattern: /\\w+\\s*=\\s*(?:(?!\\d)\\w+)?/,\n        inside: {\n          variable: {\n            pattern: /(=\\s*)(?!\\d)\\w+/,\n            lookbehind: true\n          },\n          operator: /=/\n        }\n      },\n      punctuation: [/[\\[\\]().,:`]|->/],\n      operator: [/[+\\-*\\/%]|==?=?|[!<>]=?|&&|\\|\\|?/, /\\bis\\s+(?:not\\s+)?(?:div|even|odd)(?:\\s+by)?\\b/, /\\b(?:eq|neq?|gt|lt|gt?e|lt?e|not|mod|or|and)\\b/],\n      keyword: /\\b(?:false|off|on|no|true|yes)\\b/\n    }; // Tokenize all inline Smarty expressions\n\n    Prism.hooks.add('before-tokenize', function (env) {\n      var smartyPattern = /\\{\\*[\\s\\S]*?\\*\\}|\\{[\\s\\S]+?\\}/g;\n      var smartyLitteralStart = '{literal}';\n      var smartyLitteralEnd = '{/literal}';\n      var smartyLitteralMode = false;\n      Prism.languages['markup-templating'].buildPlaceholders(env, 'smarty', smartyPattern, function (match) {\n        // Smarty tags inside {literal} block are ignored\n        if (match === smartyLitteralEnd) {\n          smartyLitteralMode = false;\n        }\n\n        if (!smartyLitteralMode) {\n          if (match === smartyLitteralStart) {\n            smartyLitteralMode = true;\n          }\n\n          return true;\n        }\n\n        return false;\n      });\n    }); // Re-insert the tokens after tokenizing\n\n    Prism.hooks.add('after-tokenize', function (env) {\n      Prism.languages['markup-templating'].tokenizePlaceholders(env, 'smarty');\n    });\n  })(Prism);\n}"],"sourceRoot":""}