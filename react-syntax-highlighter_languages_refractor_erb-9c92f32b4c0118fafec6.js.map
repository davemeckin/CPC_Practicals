{"version":3,"sources":["webpack:///./node_modules/refractor/lang/erb.js","webpack:///./node_modules/refractor/lang/ruby.js"],"names":["refractorMarkupTemplating","refractorRuby","erb","Prism","register","languages","extend","insertBefore","delimiter","pattern","alias","hooks","add","env","buildPlaceholders","tokenizePlaceholders","module","exports","displayName","aliases","ruby","comment","greedy","keyword","interpolation","inside","rest","function","regex","lookbehind","variable","symbol","builtin","constant","string","rb"],"mappings":"kGAEA,IAAIA,EAA4B,EAAQ,QAEpCC,EAAgB,EAAQ,QAM5B,SAASC,EAAIC,GACXA,EAAMC,SAASJ,GACfG,EAAMC,SAASH,GAEf,SAAWE,GACTA,EAAME,UAAUH,IAAMC,EAAME,UAAUC,OAAO,OAAQ,IACrDH,EAAME,UAAUE,aAAa,MAAO,UAAW,CAC7CC,UAAW,CACTC,QAAS,YACTC,MAAO,iBAGXP,EAAMQ,MAAMC,IAAI,mBAAmB,SAAUC,GAE3CV,EAAME,UAAU,qBAAqBS,kBAAkBD,EAAK,MAD3C,yEAGnBV,EAAMQ,MAAMC,IAAI,kBAAkB,SAAUC,GAC1CV,EAAME,UAAU,qBAAqBU,qBAAqBF,EAAK,UAbnE,CAeGV,GAvBLa,EAAOC,QAAUf,EACjBA,EAAIgB,YAAc,MAClBhB,EAAIiB,QAAU,I,kCCFd,SAASC,EAAKjB,IASZ,SAAWA,GACTA,EAAME,UAAUe,KAAOjB,EAAME,UAAUC,OAAO,QAAS,CACrDe,QAAS,CAAC,MAAO,CACfZ,QAAS,0BACTa,QAAQ,IAEVC,QAAS,yRAEX,IAAIC,EAAgB,CAClBf,QAAS,aACTgB,OAAQ,CACNjB,UAAW,CACTC,QAAS,WACTC,MAAO,OAETgB,KAAMvB,EAAME,UAAUe,cAGnBjB,EAAME,UAAUe,KAAKO,SAC5BxB,EAAME,UAAUE,aAAa,OAAQ,UAAW,CAC9CqB,MAAO,CAAC,CACNnB,QAAS,+DACTa,QAAQ,EACRG,OAAQ,CACND,cAAeA,IAEhB,CACDf,QAAS,wCACTa,QAAQ,EACRG,OAAQ,CACND,cAAeA,IAEhB,CAEDf,QAAS,yDACTa,QAAQ,EACRG,OAAQ,CACND,cAAeA,IAEhB,CACDf,QAAS,0CACTa,QAAQ,EACRG,OAAQ,CACND,cAAeA,IAEhB,CACDf,QAAS,sCACTa,QAAQ,EACRG,OAAQ,CACND,cAAeA,IAEhB,CACDf,QAAS,6EACToB,YAAY,EACZP,QAAQ,IAEVQ,SAAU,+BACVC,OAAQ,CACNtB,QAAS,mCACToB,YAAY,GAEd,oBAAqB,CACnBpB,QAAS,mBACToB,YAAY,EACZJ,OAAQ,CACNE,SAAU,OACVD,KAAMvB,EAAME,UAAUe,SAI5BjB,EAAME,UAAUE,aAAa,OAAQ,SAAU,CAC7CyB,QAAS,+OACTC,SAAU,0BAEZ9B,EAAME,UAAUe,KAAKc,OAAS,CAAC,CAC7BzB,QAAS,+DACTa,QAAQ,EACRG,OAAQ,CACND,cAAeA,IAEhB,CACDf,QAAS,wCACTa,QAAQ,EACRG,OAAQ,CACND,cAAeA,IAEhB,CAEDf,QAAS,yDACTa,QAAQ,EACRG,OAAQ,CACND,cAAeA,IAEhB,CACDf,QAAS,0CACTa,QAAQ,EACRG,OAAQ,CACND,cAAeA,IAEhB,CACDf,QAAS,sCACTa,QAAQ,EACRG,OAAQ,CACND,cAAeA,IAEhB,CACDf,QAAS,2DACTa,QAAQ,EACRG,OAAQ,CACND,cAAeA,KAGnBrB,EAAME,UAAU8B,GAAKhC,EAAME,UAAUe,KAhHvC,CAiHGjB,GA9HLa,EAAOC,QAAUG,EACjBA,EAAKF,YAAc,OACnBE,EAAKD,QAAU,CAAC","file":"react-syntax-highlighter_languages_refractor_erb-9c92f32b4c0118fafec6.js","sourcesContent":["'use strict';\n\nvar refractorMarkupTemplating = require('./markup-templating.js');\n\nvar refractorRuby = require('./ruby.js');\n\nmodule.exports = erb;\nerb.displayName = 'erb';\nerb.aliases = [];\n\nfunction erb(Prism) {\n  Prism.register(refractorMarkupTemplating);\n  Prism.register(refractorRuby);\n\n  (function (Prism) {\n    Prism.languages.erb = Prism.languages.extend('ruby', {});\n    Prism.languages.insertBefore('erb', 'comment', {\n      delimiter: {\n        pattern: /^<%=?|%>$/,\n        alias: 'punctuation'\n      }\n    });\n    Prism.hooks.add('before-tokenize', function (env) {\n      var erbPattern = /<%=?(?:[^\\r\\n]|[\\r\\n](?!=begin)|[\\r\\n]=begin\\s[\\s\\S]*?^=end)+?%>/gm;\n      Prism.languages['markup-templating'].buildPlaceholders(env, 'erb', erbPattern);\n    });\n    Prism.hooks.add('after-tokenize', function (env) {\n      Prism.languages['markup-templating'].tokenizePlaceholders(env, 'erb');\n    });\n  })(Prism);\n}","'use strict';\n\nmodule.exports = ruby;\nruby.displayName = 'ruby';\nruby.aliases = ['rb'];\n\nfunction ruby(Prism) {\n  /**\n   * Original by Samuel Flores\n   *\n   * Adds the following new token classes:\n   *      constant, builtin, variable, symbol, regex\n   */\n  ;\n\n  (function (Prism) {\n    Prism.languages.ruby = Prism.languages.extend('clike', {\n      comment: [/#.*/, {\n        pattern: /^=begin\\s[\\s\\S]*?^=end/m,\n        greedy: true\n      }],\n      keyword: /\\b(?:alias|and|BEGIN|begin|break|case|class|def|define_method|defined|do|each|else|elsif|END|end|ensure|false|for|if|in|module|new|next|nil|not|or|protected|private|public|raise|redo|require|rescue|retry|return|self|super|then|throw|true|undef|unless|until|when|while|yield)\\b/\n    });\n    var interpolation = {\n      pattern: /#\\{[^}]+\\}/,\n      inside: {\n        delimiter: {\n          pattern: /^#\\{|\\}$/,\n          alias: 'tag'\n        },\n        rest: Prism.languages.ruby\n      }\n    };\n    delete Prism.languages.ruby.function;\n    Prism.languages.insertBefore('ruby', 'keyword', {\n      regex: [{\n        pattern: /%r([^a-zA-Z0-9\\s{(\\[<])(?:(?!\\1)[^\\\\]|\\\\[\\s\\S])*\\1[gim]{0,3}/,\n        greedy: true,\n        inside: {\n          interpolation: interpolation\n        }\n      }, {\n        pattern: /%r\\((?:[^()\\\\]|\\\\[\\s\\S])*\\)[gim]{0,3}/,\n        greedy: true,\n        inside: {\n          interpolation: interpolation\n        }\n      }, {\n        // Here we need to specifically allow interpolation\n        pattern: /%r\\{(?:[^#{}\\\\]|#(?:\\{[^}]+\\})?|\\\\[\\s\\S])*\\}[gim]{0,3}/,\n        greedy: true,\n        inside: {\n          interpolation: interpolation\n        }\n      }, {\n        pattern: /%r\\[(?:[^\\[\\]\\\\]|\\\\[\\s\\S])*\\][gim]{0,3}/,\n        greedy: true,\n        inside: {\n          interpolation: interpolation\n        }\n      }, {\n        pattern: /%r<(?:[^<>\\\\]|\\\\[\\s\\S])*>[gim]{0,3}/,\n        greedy: true,\n        inside: {\n          interpolation: interpolation\n        }\n      }, {\n        pattern: /(^|[^/])\\/(?!\\/)(\\[.+?]|\\\\.|[^/\\\\\\r\\n])+\\/[gim]{0,3}(?=\\s*($|[\\r\\n,.;})]))/,\n        lookbehind: true,\n        greedy: true\n      }],\n      variable: /[@$]+[a-zA-Z_]\\w*(?:[?!]|\\b)/,\n      symbol: {\n        pattern: /(^|[^:]):[a-zA-Z_]\\w*(?:[?!]|\\b)/,\n        lookbehind: true\n      },\n      'method-definition': {\n        pattern: /(\\bdef\\s+)[\\w.]+/,\n        lookbehind: true,\n        inside: {\n          function: /\\w+$/,\n          rest: Prism.languages.ruby\n        }\n      }\n    });\n    Prism.languages.insertBefore('ruby', 'number', {\n      builtin: /\\b(?:Array|Bignum|Binding|Class|Continuation|Dir|Exception|FalseClass|File|Stat|Fixnum|Float|Hash|Integer|IO|MatchData|Method|Module|NilClass|Numeric|Object|Proc|Range|Regexp|String|Struct|TMS|Symbol|ThreadGroup|Thread|Time|TrueClass)\\b/,\n      constant: /\\b[A-Z]\\w*(?:[?!]|\\b)/\n    });\n    Prism.languages.ruby.string = [{\n      pattern: /%[qQiIwWxs]?([^a-zA-Z0-9\\s{(\\[<])(?:(?!\\1)[^\\\\]|\\\\[\\s\\S])*\\1/,\n      greedy: true,\n      inside: {\n        interpolation: interpolation\n      }\n    }, {\n      pattern: /%[qQiIwWxs]?\\((?:[^()\\\\]|\\\\[\\s\\S])*\\)/,\n      greedy: true,\n      inside: {\n        interpolation: interpolation\n      }\n    }, {\n      // Here we need to specifically allow interpolation\n      pattern: /%[qQiIwWxs]?\\{(?:[^#{}\\\\]|#(?:\\{[^}]+\\})?|\\\\[\\s\\S])*\\}/,\n      greedy: true,\n      inside: {\n        interpolation: interpolation\n      }\n    }, {\n      pattern: /%[qQiIwWxs]?\\[(?:[^\\[\\]\\\\]|\\\\[\\s\\S])*\\]/,\n      greedy: true,\n      inside: {\n        interpolation: interpolation\n      }\n    }, {\n      pattern: /%[qQiIwWxs]?<(?:[^<>\\\\]|\\\\[\\s\\S])*>/,\n      greedy: true,\n      inside: {\n        interpolation: interpolation\n      }\n    }, {\n      pattern: /(\"|')(?:#\\{[^}]+\\}|\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,\n      greedy: true,\n      inside: {\n        interpolation: interpolation\n      }\n    }];\n    Prism.languages.rb = Prism.languages.ruby;\n  })(Prism);\n}"],"sourceRoot":""}