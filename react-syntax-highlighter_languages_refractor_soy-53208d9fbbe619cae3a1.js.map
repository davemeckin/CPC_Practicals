{"version":3,"sources":["webpack:///./node_modules/refractor/lang/soy.js"],"names":["refractorMarkupTemplating","soy","Prism","register","stringPattern","numberPattern","languages","comment","pattern","lookbehind","greedy","alias","inside","punctuation","parameter","keyword","delimiter","property","variable","string","number","function","boolean","operator","hooks","add","env","soyLitteralMode","buildPlaceholders","match","tokenizePlaceholders","module","exports","displayName","aliases"],"mappings":"+FAEA,IAAIA,EAA4B,EAAQ,QAMxC,SAASC,EAAIC,GACXA,EAAMC,SAASH,GAEf,SAAWE,GACT,IAAIE,EAAgB,iDAChBC,EAAgB,oDACpBH,EAAMI,UAAUL,IAAM,CACpBM,QAAS,CAAC,mBAAoB,CAC5BC,QAAS,aACTC,YAAY,EACZC,QAAQ,IAEV,cAAe,CACbF,QAAS,yFACTC,YAAY,EACZE,MAAO,SACPC,OAAQ,CACNC,YAAa,OAGjBC,UAAW,CACTN,QAAS,mCACTC,YAAY,EACZE,MAAO,YAETI,QAAS,CAAC,CACRP,QAAS,kNACTC,YAAY,GACX,2FACHO,UAAW,CACTR,QAAS,gBACTG,MAAO,eAETM,SAAU,WACVC,SAAU,CACRV,QAAS,0CACTI,OAAQ,CACNO,OAAQ,CACNX,QAASJ,EACTM,QAAQ,GAEVU,OAAQf,EACRQ,YAAa,aAGjBM,OAAQ,CACNX,QAASJ,EACTM,QAAQ,GAEVW,SAAU,CAAC,YAAa,CACtBb,QAAS,oBACTC,YAAY,IAEda,QAAS,qBACTF,OAAQf,EACRkB,SAAU,iDACVV,YAAa,kBAGfX,EAAMsB,MAAMC,IAAI,mBAAmB,SAAUC,GAC3C,IAGIC,GAAkB,EACtBzB,EAAMI,UAAU,qBAAqBsB,kBAAkBF,EAAK,MAJ3C,4CAI8D,SAAUG,GAMvF,MARmB,eAIfA,IACFF,GAAkB,IAGfA,IATgB,cAUfE,IACFF,GAAkB,IAGb,SAObzB,EAAMsB,MAAMC,IAAI,kBAAkB,SAAUC,GAC1CxB,EAAMI,UAAU,qBAAqBwB,qBAAqBJ,EAAK,UAhFnE,CAkFGxB,GAzFL6B,EAAOC,QAAU/B,EACjBA,EAAIgC,YAAc,MAClBhC,EAAIiC,QAAU","file":"react-syntax-highlighter_languages_refractor_soy-53208d9fbbe619cae3a1.js","sourcesContent":["'use strict';\n\nvar refractorMarkupTemplating = require('./markup-templating.js');\n\nmodule.exports = soy;\nsoy.displayName = 'soy';\nsoy.aliases = [];\n\nfunction soy(Prism) {\n  Prism.register(refractorMarkupTemplating);\n\n  (function (Prism) {\n    var stringPattern = /([\"'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/;\n    var numberPattern = /\\b\\d+(?:\\.\\d+)?(?:[eE][+-]?\\d+)?\\b|\\b0x[\\dA-F]+\\b/;\n    Prism.languages.soy = {\n      comment: [/\\/\\*[\\s\\S]*?\\*\\//, {\n        pattern: /(\\s)\\/\\/.*/,\n        lookbehind: true,\n        greedy: true\n      }],\n      'command-arg': {\n        pattern: /({+\\/?\\s*(?:alias|call|delcall|delpackage|deltemplate|namespace|template)\\s+)\\.?[\\w.]+/,\n        lookbehind: true,\n        alias: 'string',\n        inside: {\n          punctuation: /\\./\n        }\n      },\n      parameter: {\n        pattern: /({+\\/?\\s*@?param\\??\\s+)\\.?[\\w.]+/,\n        lookbehind: true,\n        alias: 'variable'\n      },\n      keyword: [{\n        pattern: /({+\\/?[^\\S\\r\\n]*)(?:\\\\[nrt]|alias|call|case|css|default|delcall|delpackage|deltemplate|else(?:if)?|fallbackmsg|for(?:each)?|if(?:empty)?|lb|let|literal|msg|namespace|nil|@?param\\??|rb|sp|switch|template|xid)/,\n        lookbehind: true\n      }, /\\b(?:any|as|attributes|bool|css|float|in|int|js|html|list|map|null|number|string|uri)\\b/],\n      delimiter: {\n        pattern: /^{+\\/?|\\/?}+$/,\n        alias: 'punctuation'\n      },\n      property: /\\w+(?==)/,\n      variable: {\n        pattern: /\\$[^\\W\\d]\\w*(?:\\??(?:\\.\\w+|\\[[^\\]]+]))*/,\n        inside: {\n          string: {\n            pattern: stringPattern,\n            greedy: true\n          },\n          number: numberPattern,\n          punctuation: /[\\[\\].?]/\n        }\n      },\n      string: {\n        pattern: stringPattern,\n        greedy: true\n      },\n      function: [/\\w+(?=\\()/, {\n        pattern: /(\\|[^\\S\\r\\n]*)\\w+/,\n        lookbehind: true\n      }],\n      boolean: /\\b(?:true|false)\\b/,\n      number: numberPattern,\n      operator: /\\?:?|<=?|>=?|==?|!=|[+*/%-]|\\b(?:and|not|or)\\b/,\n      punctuation: /[{}()\\[\\]|.,:]/\n    }; // Tokenize all inline Soy expressions\n\n    Prism.hooks.add('before-tokenize', function (env) {\n      var soyPattern = /{{.+?}}|{.+?}|\\s\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\//g;\n      var soyLitteralStart = '{literal}';\n      var soyLitteralEnd = '{/literal}';\n      var soyLitteralMode = false;\n      Prism.languages['markup-templating'].buildPlaceholders(env, 'soy', soyPattern, function (match) {\n        // Soy tags inside {literal} block are ignored\n        if (match === soyLitteralEnd) {\n          soyLitteralMode = false;\n        }\n\n        if (!soyLitteralMode) {\n          if (match === soyLitteralStart) {\n            soyLitteralMode = true;\n          }\n\n          return true;\n        }\n\n        return false;\n      });\n    }); // Re-insert the tokens after tokenizing\n\n    Prism.hooks.add('after-tokenize', function (env) {\n      Prism.languages['markup-templating'].tokenizePlaceholders(env, 'soy');\n    });\n  })(Prism);\n}"],"sourceRoot":""}